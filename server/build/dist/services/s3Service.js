"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_s3_1 = require("@aws-sdk/client-s3");
const s3_request_presigner_1 = require("@aws-sdk/s3-request-presigner");
const uuid_1 = require("uuid");
const config_1 = require("../utils/config");
const shared_1 = require("shared");
class S3Service {
    constructor() {
        const { region, s3Bucket } = (0, config_1.getConfig)();
        this.s3Client = new client_s3_1.S3Client({ region });
        this.bucketName = s3Bucket;
    }
    async getPresignedUrl(key) {
        const command = new client_s3_1.GetObjectCommand({
            Bucket: this.bucketName,
            Key: key,
        });
        return await (0, s3_request_presigner_1.getSignedUrl)(this.s3Client, command, {
            expiresIn: (0, config_1.getConfig)().presignedUrlExpiration,
        });
    }
    async generatePresignedUploadUrl(request) {
        if (request.type === shared_1.MediaType.TEXT) {
            throw new Error("Presigned URLs are not needed for text entries");
        }
        if (!shared_1.CONTENT_TYPES[request.type] || !shared_1.FILE_EXTENSIONS[request.type]) {
            throw new Error(`Unsupported media type: ${request.type}`);
        }
        const filePrefix = `journal/upload/${request.userId}/${(0, uuid_1.v4)()}`;
        const key = `${filePrefix}${shared_1.FILE_EXTENSIONS[request.type]}`;
        const contentType = shared_1.CONTENT_TYPES[request.type];
        const command = new client_s3_1.PutObjectCommand({
            Bucket: this.bucketName,
            Key: key,
            ContentType: contentType,
        });
        const uploadUrl = await (0, s3_request_presigner_1.getSignedUrl)(this.s3Client, command, {
            expiresIn: (0, config_1.getConfig)().presignedUrlExpiration,
        });
        return {
            uploadUrl,
            fileKey: key,
        };
    }
    async getObjectBuffer(objectKey) {
        try {
            const command = new client_s3_1.GetObjectCommand({
                Bucket: this.bucketName,
                Key: objectKey,
            });
            const response = await this.s3Client.send(command);
            if (!response.Body) {
                throw new Error("Empty response body from S3");
            }
            const stream = response.Body;
            return await new Promise((resolve, reject) => {
                const chunks = [];
                stream.on("data", (chunk) => chunks.push(chunk));
                stream.on("end", () => resolve(Buffer.concat(chunks)));
                stream.on("error", reject);
            });
        }
        catch (error) {
            console.error("Error retrieving object from S3:", error);
            throw error;
        }
    }
}
exports.default = new S3Service();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczNTZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NlcnZpY2VzL3MzU2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtEQUk0QjtBQUM1Qix3RUFBNkQ7QUFDN0QsK0JBQW9DO0FBQ3BDLDRDQUE0QztBQUM1QyxtQ0FNZ0I7QUFHaEIsTUFBTSxTQUFTO0lBSWI7UUFDRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUEsa0JBQVMsR0FBRSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxvQkFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQztJQUM3QixDQUFDO0lBRU0sS0FBSyxDQUFDLGVBQWUsQ0FBQyxHQUFXO1FBQ3RDLE1BQU0sT0FBTyxHQUFHLElBQUksNEJBQWdCLENBQUM7WUFDbkMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQ3ZCLEdBQUcsRUFBRSxHQUFHO1NBQ1QsQ0FBQyxDQUFDO1FBRUgsT0FBTyxNQUFNLElBQUEsbUNBQVksRUFBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRTtZQUNoRCxTQUFTLEVBQUUsSUFBQSxrQkFBUyxHQUFFLENBQUMsc0JBQXNCO1NBQzlDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsMEJBQTBCLENBQ3JDLE9BQTRCO1FBRTVCLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxrQkFBUyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3BDLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQztRQUNwRSxDQUFDO1FBRUQsSUFBSSxDQUFDLHNCQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQWUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUNuRSxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM3RCxDQUFDO1FBRUQsTUFBTSxVQUFVLEdBQUcsa0JBQWtCLE9BQU8sQ0FBQyxNQUFNLElBQUksSUFBQSxTQUFNLEdBQUUsRUFBRSxDQUFDO1FBQ2xFLE1BQU0sR0FBRyxHQUFHLEdBQUcsVUFBVSxHQUFHLHdCQUFlLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDNUQsTUFBTSxXQUFXLEdBQUcsc0JBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFaEQsTUFBTSxPQUFPLEdBQUcsSUFBSSw0QkFBZ0IsQ0FBQztZQUNuQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDdkIsR0FBRyxFQUFFLEdBQUc7WUFDUixXQUFXLEVBQUUsV0FBVztTQUN6QixDQUFDLENBQUM7UUFFSCxNQUFNLFNBQVMsR0FBRyxNQUFNLElBQUEsbUNBQVksRUFBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRTtZQUMzRCxTQUFTLEVBQUUsSUFBQSxrQkFBUyxHQUFFLENBQUMsc0JBQXNCO1NBQzlDLENBQUMsQ0FBQztRQUVILE9BQU87WUFDTCxTQUFTO1lBQ1QsT0FBTyxFQUFFLEdBQUc7U0FDYixDQUFDO0lBQ0osQ0FBQztJQUVNLEtBQUssQ0FBQyxlQUFlLENBQUMsU0FBaUI7UUFDNUMsSUFBSSxDQUFDO1lBQ0gsTUFBTSxPQUFPLEdBQUcsSUFBSSw0QkFBZ0IsQ0FBQztnQkFDbkMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVO2dCQUN2QixHQUFHLEVBQUUsU0FBUzthQUNmLENBQUMsQ0FBQztZQUVILE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFbkQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1lBQ2pELENBQUM7WUFFRCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsSUFBMkIsQ0FBQztZQUNwRCxPQUFPLE1BQU0sSUFBSSxPQUFPLENBQVMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7Z0JBQ25ELE1BQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztnQkFDNUIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDekQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN2RCxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUM3QixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN6RCxNQUFNLEtBQUssQ0FBQztRQUNkLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxrQkFBZSxJQUFJLFNBQVMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgUzNDbGllbnQsXG4gIFB1dE9iamVjdENvbW1hbmQsXG4gIEdldE9iamVjdENvbW1hbmQsXG59IGZyb20gXCJAYXdzLXNkay9jbGllbnQtczNcIjtcbmltcG9ydCB7IGdldFNpZ25lZFVybCB9IGZyb20gXCJAYXdzLXNkay9zMy1yZXF1ZXN0LXByZXNpZ25lclwiO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSBcInV1aWRcIjtcbmltcG9ydCB7IGdldENvbmZpZyB9IGZyb20gXCIuLi91dGlscy9jb25maWdcIjtcbmltcG9ydCB7XG4gIE1lZGlhVHlwZSxcbiAgUHJlc2lnbmVkVXJsUmVxdWVzdCxcbiAgUHJlc2lnbmVkVXJsUmVzcG9uc2UsXG4gIENPTlRFTlRfVFlQRVMsXG4gIEZJTEVfRVhURU5TSU9OUyxcbn0gZnJvbSBcInNoYXJlZFwiO1xuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XG5cbmNsYXNzIFMzU2VydmljZSB7XG4gIHByaXZhdGUgczNDbGllbnQ6IFMzQ2xpZW50O1xuICBwcml2YXRlIGJ1Y2tldE5hbWU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCB7IHJlZ2lvbiwgczNCdWNrZXQgfSA9IGdldENvbmZpZygpO1xuICAgIHRoaXMuczNDbGllbnQgPSBuZXcgUzNDbGllbnQoeyByZWdpb24gfSk7XG4gICAgdGhpcy5idWNrZXROYW1lID0gczNCdWNrZXQ7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0UHJlc2lnbmVkVXJsKGtleTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBjb21tYW5kID0gbmV3IEdldE9iamVjdENvbW1hbmQoe1xuICAgICAgQnVja2V0OiB0aGlzLmJ1Y2tldE5hbWUsXG4gICAgICBLZXk6IGtleSxcbiAgICB9KTtcblxuICAgIHJldHVybiBhd2FpdCBnZXRTaWduZWRVcmwodGhpcy5zM0NsaWVudCwgY29tbWFuZCwge1xuICAgICAgZXhwaXJlc0luOiBnZXRDb25maWcoKS5wcmVzaWduZWRVcmxFeHBpcmF0aW9uLFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdlbmVyYXRlUHJlc2lnbmVkVXBsb2FkVXJsKFxuICAgIHJlcXVlc3Q6IFByZXNpZ25lZFVybFJlcXVlc3RcbiAgKTogUHJvbWlzZTxQcmVzaWduZWRVcmxSZXNwb25zZT4ge1xuICAgIGlmIChyZXF1ZXN0LnR5cGUgPT09IE1lZGlhVHlwZS5URVhUKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcmVzaWduZWQgVVJMcyBhcmUgbm90IG5lZWRlZCBmb3IgdGV4dCBlbnRyaWVzXCIpO1xuICAgIH1cblxuICAgIGlmICghQ09OVEVOVF9UWVBFU1tyZXF1ZXN0LnR5cGVdIHx8ICFGSUxFX0VYVEVOU0lPTlNbcmVxdWVzdC50eXBlXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBtZWRpYSB0eXBlOiAke3JlcXVlc3QudHlwZX1gKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWxlUHJlZml4ID0gYGpvdXJuYWwvdXBsb2FkLyR7cmVxdWVzdC51c2VySWR9LyR7dXVpZHY0KCl9YDtcbiAgICBjb25zdCBrZXkgPSBgJHtmaWxlUHJlZml4fSR7RklMRV9FWFRFTlNJT05TW3JlcXVlc3QudHlwZV19YDtcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IENPTlRFTlRfVFlQRVNbcmVxdWVzdC50eXBlXTtcblxuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgUHV0T2JqZWN0Q29tbWFuZCh7XG4gICAgICBCdWNrZXQ6IHRoaXMuYnVja2V0TmFtZSxcbiAgICAgIEtleToga2V5LFxuICAgICAgQ29udGVudFR5cGU6IGNvbnRlbnRUeXBlLFxuICAgIH0pO1xuXG4gICAgY29uc3QgdXBsb2FkVXJsID0gYXdhaXQgZ2V0U2lnbmVkVXJsKHRoaXMuczNDbGllbnQsIGNvbW1hbmQsIHtcbiAgICAgIGV4cGlyZXNJbjogZ2V0Q29uZmlnKCkucHJlc2lnbmVkVXJsRXhwaXJhdGlvbixcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICB1cGxvYWRVcmwsXG4gICAgICBmaWxlS2V5OiBrZXksXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRPYmplY3RCdWZmZXIob2JqZWN0S2V5OiBzdHJpbmcpOiBQcm9taXNlPEJ1ZmZlcj4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjb21tYW5kID0gbmV3IEdldE9iamVjdENvbW1hbmQoe1xuICAgICAgICBCdWNrZXQ6IHRoaXMuYnVja2V0TmFtZSxcbiAgICAgICAgS2V5OiBvYmplY3RLZXksXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnMzQ2xpZW50LnNlbmQoY29tbWFuZCk7XG5cbiAgICAgIGlmICghcmVzcG9uc2UuQm9keSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbXB0eSByZXNwb25zZSBib2R5IGZyb20gUzNcIik7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IHN0cmVhbSA9IHJlc3BvbnNlLkJvZHkgYXMgdW5rbm93biBhcyBSZWFkYWJsZTtcbiAgICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZTxCdWZmZXI+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgY2h1bmtzOiBCdWZmZXJbXSA9IFtdO1xuICAgICAgICBzdHJlYW0ub24oXCJkYXRhXCIsIChjaHVuazogQnVmZmVyKSA9PiBjaHVua3MucHVzaChjaHVuaykpO1xuICAgICAgICBzdHJlYW0ub24oXCJlbmRcIiwgKCkgPT4gcmVzb2x2ZShCdWZmZXIuY29uY2F0KGNodW5rcykpKTtcbiAgICAgICAgc3RyZWFtLm9uKFwiZXJyb3JcIiwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgcmV0cmlldmluZyBvYmplY3QgZnJvbSBTMzpcIiwgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBTM1NlcnZpY2UoKTtcbiJdfQ==