"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mem0ai_1 = require("mem0ai");
const shared_1 = require("shared");
const config_1 = require("../utils/config");
const s3Service_1 = __importDefault(require("./s3Service"));
const transcriptionService_1 = __importDefault(require("./transcriptionService"));
const genai_1 = require("@google/genai");
class Mem0Service {
    constructor() {
        this.genAI = null;
        const config = (0, config_1.getConfig)();
        this.client = new mem0ai_1.MemoryClient({
            apiKey: config.mem0ApiKey,
        });
        this.geminiApiKey = config.geminiApiKey;
        this.geminiModel = config.geminiModel;
        this.genAI = new genai_1.GoogleGenAI({ apiKey: this.geminiApiKey });
    }
    addUserIdFilter(filters, params) {
        filters.AND.push({ user_id: params.userId });
    }
    addDateFilter(filters, params) {
        if (params.dateFrom || params.dateTo) {
            const dateFilter = {};
            if (params.dateFrom) {
                dateFilter.gte = params.dateFrom;
            }
            if (params.dateTo) {
                dateFilter.lte = params.dateTo;
            }
            filters.AND.push({ created_at: dateFilter });
        }
    }
    addTypeFilter(filters, params) {
        if (params.types && params.types.length > 0) {
            const typeFilters = params.types.map((type) => ({
                metadata: { type },
            }));
            filters.AND.push({
                OR: typeFilters,
            });
        }
    }
    addTagFilter(filters, params) {
        if (params.tags && params.tags.length > 0) {
            filters.AND.push({
                metadata: {
                    tags: params.tags,
                },
            });
        }
    }
    async searchEntries(params) {
        console.log("params", JSON.stringify(params, null, 2));
        const filters = {
            AND: [],
        };
        this.addUserIdFilter(filters, params);
        this.addDateFilter(filters, params);
        this.addTypeFilter(filters, params);
        this.addTagFilter(filters, params);
        console.log("filters", JSON.stringify(filters, null, 2));
        const searchOptions = {
            user_id: params.userId,
            filters,
            api_version: "v2",
        };
        const searchResults = await this.client.search(params.query, searchOptions);
        console.log("searchResults", JSON.stringify(searchResults, null, 2));
        return this.parseSearchResults(searchResults);
    }
    parseSearchResults(searchResults) {
        return searchResults.map((result) => ({
            id: result.id,
            userId: result.user_id ?? "",
            memory: result.memory ?? "",
            timestamp: result.metadata.timestamp ?? {},
            tags: result.metadata.tags ?? [],
            mood: result.metadata.mood ?? "",
            location: result.metadata.location ?? {},
            data: result.metadata.data ?? "",
            score: result.score ?? 0,
            type: result.metadata.type ?? shared_1.MediaType.TEXT,
        }));
    }
    async getImageDescription(s3ObjectKey) {
        try {
            const imageData = await s3Service_1.default.getObjectBuffer(s3ObjectKey);
            const originalFilename = s3ObjectKey.split("/").pop() || "journal-image.jpg";
            const imageFile = new File([imageData], originalFilename, {
                type: "image/jpeg",
            });
            const uploadedGeminiFile = await this.genAI.files.upload({
                file: imageFile,
                config: { mimeType: "image/jpeg" },
            });
            const promptText = process.env.IMAGE_DESCRIPTION_PROMPT ||
                "Please describe what's in this image in 1-2 simple sentences. Focus only on the main subject/activity.";
            const result = await this.genAI.models.generateContent({
                model: this.geminiModel,
                contents: (0, genai_1.createUserContent)([
                    (0, genai_1.createPartFromUri)(uploadedGeminiFile.uri, uploadedGeminiFile.mimeType),
                    promptText,
                ]),
            });
            return result.text;
        }
        catch (error) {
            console.error("Error generating image description:", error);
            throw new Error("Error generating image description");
        }
    }
    async getImageMessage(data) {
        const imageDescription = await this.getImageDescription(data);
        return imageDescription;
    }
    async getAudioMessage(data) {
        const audioUrl = await s3Service_1.default.getPresignedUrl(data);
        const transcription = await transcriptionService_1.default.transcribeAudio(audioUrl);
        return transcription;
    }
    async addJournalEntry(entry) {
        let message;
        switch (entry.type) {
            case shared_1.MediaType.TEXT:
                message = entry.data;
                break;
            case shared_1.MediaType.IMAGE:
                message = await this.getImageMessage(entry.data);
                break;
            case shared_1.MediaType.AUDIO:
                message = await this.getAudioMessage(entry.data);
                break;
            default:
                throw new Error(`Unsupported media type: ${entry.type}`);
        }
        const result = await this.client.add(message, {
            user_id: entry.userId,
            metadata: {
                ...entry.metadata,
                data: entry.data,
                type: entry.type,
            },
            api_version: "v2",
            infer: false,
        });
        console.log("result", JSON.stringify(result, null, 2));
        return result;
    }
}
exports.default = new Mem0Service();
//# sourceMappingURL=data:application/json;base64,