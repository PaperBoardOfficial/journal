"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const shared_1 = require("shared");
const apiResponses_1 = require("../utils/apiResponses");
class ValidationService {
    validateJournalPayload(payload) {
        if (!payload.type) {
            return (0, apiResponses_1.errorResponse)("Missing entry type", 400);
        }
        if (!payload.data) {
            return (0, apiResponses_1.errorResponse)("Missing data", 400);
        }
        if (!payload.metadata || !payload.metadata.timestamp || !payload.metadata.tags) {
            return (0, apiResponses_1.errorResponse)("Missing required metadata", 400);
        }
        if (!payload.userId) {
            return (0, apiResponses_1.errorResponse)("Missing userId", 400);
        }
        return null;
    }
    validatePresignedUrlRequest(payload) {
        if (!payload.userId) {
            return (0, apiResponses_1.errorResponse)("Missing userId", 400);
        }
        if (!this.isValidMediaType(payload.type)) {
            return (0, apiResponses_1.errorResponse)("Invalid media type", 400);
        }
        return null;
    }
    validateSearchParams(payload) {
        if (!payload.userId) {
            return (0, apiResponses_1.errorResponse)("Missing userId parameter", 400);
        }
        if (!payload.query) {
            return (0, apiResponses_1.errorResponse)("Missing query parameter", 400);
        }
        const hasInvalidType = payload.types?.some((type) => !this.isValidMediaType(type));
        if (hasInvalidType) {
            return (0, apiResponses_1.errorResponse)("Invalid types parameter", 400);
        }
        return null;
    }
    isValidMediaType(type) {
        return Object.values(shared_1.MediaType).includes(type);
    }
}
exports.default = new ValidationService();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvblNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VydmljZXMvdmFsaWRhdGlvblNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxtQ0FLZ0I7QUFDaEIsd0RBQXNEO0FBRXRELE1BQU0saUJBQWlCO0lBQ2Qsc0JBQXNCLENBQzNCLE9BQTRCO1FBRTVCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbEIsT0FBTyxJQUFBLDRCQUFhLEVBQUMsb0JBQW9CLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEQsQ0FBQztRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbEIsT0FBTyxJQUFBLDRCQUFhLEVBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLENBQUM7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMvRSxPQUFPLElBQUEsNEJBQWEsRUFBQywyQkFBMkIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNwQixPQUFPLElBQUEsNEJBQWEsRUFBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM5QyxDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sMkJBQTJCLENBQ2hDLE9BQTRCO1FBRTVCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDcEIsT0FBTyxJQUFBLDRCQUFhLEVBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDOUMsQ0FBQztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDekMsT0FBTyxJQUFBLDRCQUFhLEVBQUMsb0JBQW9CLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEQsQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLG9CQUFvQixDQUN6QixPQUEwQjtRQUUxQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3BCLE9BQU8sSUFBQSw0QkFBYSxFQUFDLDBCQUEwQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3hELENBQUM7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ25CLE9BQU8sSUFBQSw0QkFBYSxFQUFDLHlCQUF5QixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZELENBQUM7UUFDRCxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FDeEMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUN2QyxDQUFDO1FBQ0YsSUFBSSxjQUFjLEVBQUUsQ0FBQztZQUNuQixPQUFPLElBQUEsNEJBQWEsRUFBQyx5QkFBeUIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN2RCxDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU8sZ0JBQWdCLENBQUMsSUFBWTtRQUNuQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsa0JBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFpQixDQUFDLENBQUM7SUFDOUQsQ0FBQztDQUNGO0FBRUQsa0JBQWUsSUFBSSxpQkFBaUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5UmVzdWx0IH0gZnJvbSBcImF3cy1sYW1iZGFcIjtcbmltcG9ydCB7XG4gIEpvdXJuYWxFbnRyeVBheWxvYWQsXG4gIE1lZGlhVHlwZSxcbiAgUHJlc2lnbmVkVXJsUmVxdWVzdCxcbiAgU2VhcmNoUXVlcnlQYXJhbXMsXG59IGZyb20gXCJzaGFyZWRcIjtcbmltcG9ydCB7IGVycm9yUmVzcG9uc2UgfSBmcm9tIFwiLi4vdXRpbHMvYXBpUmVzcG9uc2VzXCI7XG5cbmNsYXNzIFZhbGlkYXRpb25TZXJ2aWNlIHtcbiAgcHVibGljIHZhbGlkYXRlSm91cm5hbFBheWxvYWQoXG4gICAgcGF5bG9hZDogSm91cm5hbEVudHJ5UGF5bG9hZFxuICApOiBBUElHYXRld2F5UHJveHlSZXN1bHQgfCBudWxsIHtcbiAgICBpZiAoIXBheWxvYWQudHlwZSkge1xuICAgICAgcmV0dXJuIGVycm9yUmVzcG9uc2UoXCJNaXNzaW5nIGVudHJ5IHR5cGVcIiwgNDAwKTtcbiAgICB9XG4gICAgaWYgKCFwYXlsb2FkLmRhdGEpIHtcbiAgICAgIHJldHVybiBlcnJvclJlc3BvbnNlKFwiTWlzc2luZyBkYXRhXCIsIDQwMCk7XG4gICAgfVxuICAgIGlmICghcGF5bG9hZC5tZXRhZGF0YSB8fCAhcGF5bG9hZC5tZXRhZGF0YS50aW1lc3RhbXAgfHwgIXBheWxvYWQubWV0YWRhdGEudGFncykge1xuICAgICAgcmV0dXJuIGVycm9yUmVzcG9uc2UoXCJNaXNzaW5nIHJlcXVpcmVkIG1ldGFkYXRhXCIsIDQwMCk7XG4gICAgfVxuICAgIGlmICghcGF5bG9hZC51c2VySWQpIHtcbiAgICAgIHJldHVybiBlcnJvclJlc3BvbnNlKFwiTWlzc2luZyB1c2VySWRcIiwgNDAwKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwdWJsaWMgdmFsaWRhdGVQcmVzaWduZWRVcmxSZXF1ZXN0KFxuICAgIHBheWxvYWQ6IFByZXNpZ25lZFVybFJlcXVlc3RcbiAgKTogQVBJR2F0ZXdheVByb3h5UmVzdWx0IHwgbnVsbCB7XG4gICAgaWYgKCFwYXlsb2FkLnVzZXJJZCkge1xuICAgICAgcmV0dXJuIGVycm9yUmVzcG9uc2UoXCJNaXNzaW5nIHVzZXJJZFwiLCA0MDApO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuaXNWYWxpZE1lZGlhVHlwZShwYXlsb2FkLnR5cGUpKSB7XG4gICAgICByZXR1cm4gZXJyb3JSZXNwb25zZShcIkludmFsaWQgbWVkaWEgdHlwZVwiLCA0MDApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyB2YWxpZGF0ZVNlYXJjaFBhcmFtcyhcbiAgICBwYXlsb2FkOiBTZWFyY2hRdWVyeVBhcmFtc1xuICApOiBBUElHYXRld2F5UHJveHlSZXN1bHQgfCBudWxsIHtcbiAgICBpZiAoIXBheWxvYWQudXNlcklkKSB7XG4gICAgICByZXR1cm4gZXJyb3JSZXNwb25zZShcIk1pc3NpbmcgdXNlcklkIHBhcmFtZXRlclwiLCA0MDApO1xuICAgIH1cbiAgICBpZiAoIXBheWxvYWQucXVlcnkpIHtcbiAgICAgIHJldHVybiBlcnJvclJlc3BvbnNlKFwiTWlzc2luZyBxdWVyeSBwYXJhbWV0ZXJcIiwgNDAwKTtcbiAgICB9XG4gICAgY29uc3QgaGFzSW52YWxpZFR5cGUgPSBwYXlsb2FkLnR5cGVzPy5zb21lKFxuICAgICAgKHR5cGUpID0+ICF0aGlzLmlzVmFsaWRNZWRpYVR5cGUodHlwZSlcbiAgICApO1xuICAgIGlmIChoYXNJbnZhbGlkVHlwZSkge1xuICAgICAgcmV0dXJuIGVycm9yUmVzcG9uc2UoXCJJbnZhbGlkIHR5cGVzIHBhcmFtZXRlclwiLCA0MDApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgaXNWYWxpZE1lZGlhVHlwZSh0eXBlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhNZWRpYVR5cGUpLmluY2x1ZGVzKHR5cGUgYXMgTWVkaWFUeXBlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgVmFsaWRhdGlvblNlcnZpY2UoKTtcbiJdfQ==